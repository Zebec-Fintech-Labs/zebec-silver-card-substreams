// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.3

import { Writer, Reader } from "as-proto/assembly";

export class Withdraw {
  static encode(message: Withdraw, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.txHash);

    writer.uint32(18);
    writer.string(message.userVault);

    writer.uint32(26);
    writer.string(message.withdrawer);

    writer.uint32(34);
    writer.string(message.token);

    writer.uint32(40);
    writer.uint64(message.amount);

    writer.uint32(48);
    writer.int64(message.timestamp);
  }

  static decode(reader: Reader, length: i32): Withdraw {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Withdraw();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.txHash = reader.string();
          break;

        case 2:
          message.userVault = reader.string();
          break;

        case 3:
          message.withdrawer = reader.string();
          break;

        case 4:
          message.token = reader.string();
          break;

        case 5:
          message.amount = reader.uint64();
          break;

        case 6:
          message.timestamp = reader.int64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  txHash: string;
  userVault: string;
  withdrawer: string;
  token: string;
  amount: u64;
  timestamp: i64;

  constructor(
    txHash: string = "",
    userVault: string = "",
    withdrawer: string = "",
    token: string = "",
    amount: u64 = 0,
    timestamp: i64 = 0
  ) {
    this.txHash = txHash;
    this.userVault = userVault;
    this.withdrawer = withdrawer;
    this.token = token;
    this.amount = amount;
    this.timestamp = timestamp;
  }
}
