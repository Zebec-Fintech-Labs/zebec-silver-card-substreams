// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.3

import { Writer, Reader } from "as-proto/assembly";

export class WithdrawYield {
  static encode(message: WithdrawYield, writer: Writer): void {
    writer.uint32(8);
    writer.uint64(message.slot);

    writer.uint32(16);
    writer.uint64(message.blockHeight);

    writer.uint32(26);
    writer.string(message.blockhash);

    writer.uint32(32);
    writer.int64(message.timestamp);

    writer.uint32(42);
    writer.string(message.txHash);

    writer.uint32(48);
    writer.uint64(message.amount);

    writer.uint32(56);
    writer.bool(message.withdrawAll);

    writer.uint32(66);
    writer.string(message.user);

    writer.uint32(74);
    writer.string(message.userVault);
  }

  static decode(reader: Reader, length: i32): WithdrawYield {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new WithdrawYield();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.slot = reader.uint64();
          break;

        case 2:
          message.blockHeight = reader.uint64();
          break;

        case 3:
          message.blockhash = reader.string();
          break;

        case 4:
          message.timestamp = reader.int64();
          break;

        case 5:
          message.txHash = reader.string();
          break;

        case 6:
          message.amount = reader.uint64();
          break;

        case 7:
          message.withdrawAll = reader.bool();
          break;

        case 8:
          message.user = reader.string();
          break;

        case 9:
          message.userVault = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  slot: u64;
  blockHeight: u64;
  blockhash: string;
  timestamp: i64;
  txHash: string;
  amount: u64;
  withdrawAll: bool;
  user: string;
  userVault: string;

  constructor(
    slot: u64 = 0,
    blockHeight: u64 = 0,
    blockhash: string = "",
    timestamp: i64 = 0,
    txHash: string = "",
    amount: u64 = 0,
    withdrawAll: bool = false,
    user: string = "",
    userVault: string = ""
  ) {
    this.slot = slot;
    this.blockHeight = blockHeight;
    this.blockhash = blockhash;
    this.timestamp = timestamp;
    this.txHash = txHash;
    this.amount = amount;
    this.withdrawAll = withdrawAll;
    this.user = user;
    this.userVault = userVault;
  }
}
