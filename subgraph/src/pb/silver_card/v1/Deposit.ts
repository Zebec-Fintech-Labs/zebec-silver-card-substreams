// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.3

import { Writer, Reader } from "as-proto/assembly";
import { DepositType } from "./DepositType";

export class Deposit {
  static encode(message: Deposit, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.txHash);

    writer.uint32(18);
    writer.string(message.source);

    writer.uint32(26);
    writer.string(message.destination);

    writer.uint32(34);
    writer.string(message.inputToken);

    writer.uint32(42);
    writer.string(message.outputToken);

    writer.uint32(48);
    writer.uint64(message.inputAmount);

    writer.uint32(56);
    writer.uint64(message.outputAmount);

    writer.uint32(64);
    writer.int32(message.depositType);

    writer.uint32(72);
    writer.int64(message.timestamp);
  }

  static decode(reader: Reader, length: i32): Deposit {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Deposit();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.txHash = reader.string();
          break;

        case 2:
          message.source = reader.string();
          break;

        case 3:
          message.destination = reader.string();
          break;

        case 4:
          message.inputToken = reader.string();
          break;

        case 5:
          message.outputToken = reader.string();
          break;

        case 6:
          message.inputAmount = reader.uint64();
          break;

        case 7:
          message.outputAmount = reader.uint64();
          break;

        case 8:
          message.depositType = reader.int32();
          break;

        case 9:
          message.timestamp = reader.int64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  txHash: string;
  source: string;
  destination: string;
  inputToken: string;
  outputToken: string;
  inputAmount: u64;
  outputAmount: u64;
  depositType: DepositType;
  timestamp: i64;

  constructor(
    txHash: string = "",
    source: string = "",
    destination: string = "",
    inputToken: string = "",
    outputToken: string = "",
    inputAmount: u64 = 0,
    outputAmount: u64 = 0,
    depositType: DepositType = 0,
    timestamp: i64 = 0
  ) {
    this.txHash = txHash;
    this.source = source;
    this.destination = destination;
    this.inputToken = inputToken;
    this.outputToken = outputToken;
    this.inputAmount = inputAmount;
    this.outputAmount = outputAmount;
    this.depositType = depositType;
    this.timestamp = timestamp;
  }
}
